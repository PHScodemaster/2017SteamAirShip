// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4949.RobotSteamWorks;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap { 
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Compressor pneumaticsCompressor;
    public static Solenoid pneumaticsLiftSolenoid1;
    public static Solenoid pneumaticsLiftSolenoid2;
    public static Solenoid pneumaticsGobblerSolenoid;
    public static Solenoid pneumaticsRockerSolenoid;
    public static SpeedController pickerpickerMotor;
    public static Encoder driverfEncoder;
    public static Encoder driverrEndoder;
    public static Encoder drivelfEncoder;
    public static Encoder drivelrEncoder;
    public static SpeedController driverfMotorController;
    public static SpeedController driverrMotorController;
    public static SpeedController drivelfMotorController;
    public static SpeedController drivelrMotorController;
    public static AnalogGyro driveAnalogGyro;
    public static SpeedController climberwinchMotor;
    public static Servo cameraPan;
    public static Servo cameraTilt;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        pneumaticsCompressor = new Compressor(0);
        
        
        pneumaticsLiftSolenoid1 = new Solenoid(0, 0);
        LiveWindow.addActuator("Pneumatics", "LiftSolenoid1", pneumaticsLiftSolenoid1);
        
        pneumaticsLiftSolenoid2 = new Solenoid(0, 1);
        LiveWindow.addActuator("Pneumatics", "LiftSolenoid2", pneumaticsLiftSolenoid2);
        
        pneumaticsGobblerSolenoid = new Solenoid(0, 2);
        LiveWindow.addActuator("Pneumatics", "GobblerSolenoid", pneumaticsGobblerSolenoid);
        
        pneumaticsRockerSolenoid = new Solenoid(0, 3);
        LiveWindow.addActuator("Pneumatics", "RockerSolenoid", pneumaticsRockerSolenoid);
        
        pickerpickerMotor = new Talon(7);
        LiveWindow.addActuator("Picker", "pickerMotor", (Talon) pickerpickerMotor);
        
        driverfEncoder = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive", "rfEncoder", driverfEncoder);
        driverfEncoder.setDistancePerPulse(1.0);
        driverfEncoder.setPIDSourceType(PIDSourceType.kRate);
        driverrEndoder = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive", "rrEndoder", driverrEndoder);
        driverrEndoder.setDistancePerPulse(1.0);
        driverrEndoder.setPIDSourceType(PIDSourceType.kRate);
        drivelfEncoder = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive", "lfEncoder", drivelfEncoder);
        drivelfEncoder.setDistancePerPulse(1.0);
        drivelfEncoder.setPIDSourceType(PIDSourceType.kRate);
        drivelrEncoder = new Encoder(6, 7, false, EncodingType.k4X);
        LiveWindow.addSensor("Drive", "lrEncoder", drivelrEncoder);
        drivelrEncoder.setDistancePerPulse(1.0);
        drivelrEncoder.setPIDSourceType(PIDSourceType.kRate);
        driverfMotorController = new Talon(0);
        LiveWindow.addActuator("Drive", "rfMotorController", (Talon) driverfMotorController);
        
        driverrMotorController = new Talon(1);
        LiveWindow.addActuator("Drive", "rrMotorController", (Talon) driverrMotorController);
        
        drivelfMotorController = new Talon(2);
        LiveWindow.addActuator("Drive", "lfMotorController", (Talon) drivelfMotorController);
        
        drivelrMotorController = new Talon(3);
        LiveWindow.addActuator("Drive", "lrMotorController", (Talon) drivelrMotorController);
        
        driveAnalogGyro = new AnalogGyro(0);
        LiveWindow.addSensor("Drive", "AnalogGyro", driveAnalogGyro);
        driveAnalogGyro.setSensitivity(0.007);
        climberwinchMotor = new Talon(6);
        LiveWindow.addActuator("Climber", "winchMotor", (Talon) climberwinchMotor);
        
        cameraPan = new Servo(4);
        LiveWindow.addActuator("Camera", "Pan", cameraPan);
        
        cameraTilt = new Servo(5);
        LiveWindow.addActuator("Camera", "Tilt", cameraTilt);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
