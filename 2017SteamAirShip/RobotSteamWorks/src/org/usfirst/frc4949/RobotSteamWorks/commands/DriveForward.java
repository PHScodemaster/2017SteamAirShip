// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4949.RobotSteamWorks.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc4949.RobotSteamWorks.Robot;

/**
 *
 */
public class DriveForward extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_Distance;
    private double m_Speed;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private double driveForwardSpeed;
	private double distance;
	private double distanceMoved;
	private long startTimeMillis;
	private long currentTimeMillis;
	private double error;
	private double angle;
	private double xAxis;
	private double yAxis;
	private double zAxis;
	private final double kTolerance = 0.1;
	private final double kP = 1.0;
	private final double kPivot = 0.03;
	private final double kSpeedConv = 0.008; 
	
	public DriveForward() {
		this(10, 0.5);
	}

	public DriveForward(double dist) {
		this(dist, 0.5);
	}

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveForward(double Distance, double Speed) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_Distance = Distance;
        m_Speed = Speed;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		distance = Distance;
		driveForwardSpeed = Speed;

    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	error = distance;
    	startTimeMillis = System.currentTimeMillis();
		Robot.drive.getRightFrontEncoder().reset();
		Robot.drive.getLeftFrontEncoder().reset();
		Robot.drive.getRightRearEncoder().reset();
		Robot.drive.getLeftRearEncoder().reset();
		setTimeout(2);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        angle = Robot.drive.getAngle();  // get current heading

    	if (Robot.hasEncoders) {
    		error = (distance - Robot.drive.getRightFrontEncoder().getDistance());
    	} else {
        	currentTimeMillis = System.currentTimeMillis();
        	distanceMoved = (currentTimeMillis - startTimeMillis) * driveForwardSpeed * kSpeedConv;
    		error = distance - distanceMoved;
    	}
    	
        xAxis = 0;                       // push drive to target line, if known
        yAxis = driveForwardSpeed * kP;  // push drive towards target
        zAxis = -angle * kPivot;         // push drive towards heading 0
        
		if (error >= 0) {
			Robot.drive.mecanumDrive( xAxis, yAxis, zAxis, 0);
		}
		
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	if (error <= 0) {
    		return true;
    	}
    	else {
    		return false;
    	}
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.drive.stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
